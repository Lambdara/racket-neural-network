#lang racket

(require "../neural-network.rkt")

(define (generator)
  (vector (random 2)
          (random 2)))

(define (vector-xor vec)
  (if (xor (= 1 (vector-ref vec 0))
           (= 1 (vector-ref vec 1)))
      #(1)
      #(0)))

(define network (make-object neural-network% 2 4 1))
(display "False xor false (0): ")
(send network feedforward #(0 0))
(displayln (vector-ref (send network get-output) 0))
(display "True xor true (0): ")
(send network feedforward #(1 1))
(displayln (vector-ref (send network get-output) 0))
(display "True xor false (1): ")
(send network feedforward #(1 0))
(displayln (vector-ref (send network get-output) 0))
(display "False xor true (1): ")
(send network feedforward #(0 1))
(displayln (vector-ref (send network get-output) 0))
(displayln "Training...")
(send network learn-function 10000 0.5 generator vector-xor)
(display "False xor false (0): ")
(send network feedforward #(0 0))
(displayln (vector-ref (send network get-output) 0))
(display "True xor true (0): ")
(send network feedforward #(1 1))
(displayln (vector-ref (send network get-output) 0))
(display "True xor false (1): ")
(send network feedforward #(1 0))
(displayln (vector-ref (send network get-output) 0))
(display "False xor true (1): ")
(send network feedforward #(0 1))
(displayln (vector-ref (send network get-output) 0))
